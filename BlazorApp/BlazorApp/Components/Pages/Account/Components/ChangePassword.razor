@* @using BlazorApp.Services
@using BlazorProject.Models.Helpers
@inject UserService UserService
@inject NavigationManager NavigationManager

<EditForm FormName="changePassword" Model="changePasswordForm" OnValidSubmit="ChangePasswordAsync" class="change-password-form" method="POST" novalidate>
    <DataAnnotationsValidator />

    <div class="alert-danger-dark">
        @ErrorMessage
    </div>
    <div class="change-password-form-content">
     <div>
        <span class="alert-success">@StatusMessage</span>
    </div>
        <div class="current-password" id="current-password">
            <label for="currentPassword">Current Password</label>
            <InputText @bind-Value="changePasswordForm.CurrentPassword" class="form-input" type="password" id="currentPassword" placeholder="Current password" />
            <ValidationMessage For="() => changePasswordForm.CurrentPassword" />
        </div>

        <div class="new-password" id="new-password">
            <label for="newPassword">New Password</label>
            <InputText @bind-Value="changePasswordForm.NewPassword" class="form-input" type="password" id="newPassword" placeholder="New password" />
            <ValidationMessage For="() => changePasswordForm.NewPassword" />
        </div>

        <div class="confirm-password" id="confirm-password">
            <label for="confirmPassword">Confirm Password</label>
            <InputText @bind-Value="changePasswordForm.ConfirmPassword" class="form-input" type="password" id="confirmPassword" placeholder="Confirm password" />
            <ValidationMessage For="() => changePasswordForm.ConfirmPassword" />
        </div>
    </div>

    <div class="buttons" id="buttons">

        <button class="btn-gray" type="button" onclick="location.reload();">Cancel</button>
        <button class="btn-theme" type="submit">Change password</button>

    </div>
</EditForm>

@code {
    private string? StatusMessage;
    private string? ErrorMessage;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private PasswordModel changePasswordForm { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.GetUserAsync(HttpContext.User) ?? null!;
    }


    private async Task ChangePasswordAsync()
    {
        try
        {
            var result = await UserManager.ChangePasswordAsync(user, changePasswordForm.CurrentPassword, changePasswordForm.NewPassword);
            if (result.Succeeded)
            {
                StatusMessage = "Password has been changed";
                changePasswordForm = new();
            }
            else
            {
                ErrorMessage = "Couldn't change password";
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }



    private async Task DeleteAccountAsync()
    {
        try
        {
            var user = await UserService.GetUserAsync();
            if (user != null)
            {
                var deleteUser = await UserManager.DeleteAsync(user);
                if (deleteUser.Succeeded)
                {
                    StatusMessage = "Account had been deleted, navigating to homepage";
                    NavigationManager.NavigateTo("/");
                    await Task.Delay(2000);
                }
                else
                {
                    ErrorMessage = "Couldn't delete account";
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    public class DeleteAccountModel
    {
        [Required]
        [Display(Name = "Delete confirm")]
        [RequiredCheckbox(ErrorMessage = "You must check the box if you want to delte your account")]
        public bool ConfirmDeleteAccount { get; set; } = false;
    }


    public class PasswordModel
    {
        [Display(Name = "Password", Prompt = "Enter Password")]
        [Required(ErrorMessage = "Invalid password")]
        [RegularExpression("^(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()-+=])[A-Za-z\\d!@#$%^&*()-+=]{8,}$", ErrorMessage = "Invalid password")]
        [DataType(DataType.Password)]
        public string CurrentPassword { get; set; } = null!;



        [Display(Name = "Password", Prompt = "Enter Password")]
        [Required(ErrorMessage = "Invalid password")]
        [RegularExpression("^(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()-+=])[A-Za-z\\d!@#$%^&*()-+=]{8,}$", ErrorMessage = "Invalid password")]
        [DataType(DataType.Password)]
        public string NewPassword { get; set; } = null!;



        [Display(Name = "Confirm password", Prompt = "Enter password")]
        [Required(ErrorMessage = "Invalid password")]
        [DataType(DataType.Password)]
        [Compare(nameof(NewPassword), ErrorMessage = "Password doesn't match")]
        public string ConfirmPassword { get; set; } = null!;
    }
}
 *@