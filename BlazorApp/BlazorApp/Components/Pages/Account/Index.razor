@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using BlazorApp.Models.Account
@using Microsoft.AspNetCore.Identity
@using BlazorApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>Profile</PageTitle>

@* <h3>Profile</h3> *@

@* <div class="row">
    <div class="col-md-6"> *@
@*         <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm> *@

        
@*     </div>
</div> *@

<section class="basic-info">
    @*     @if (!string.IsNullOrEmpty(ViewData["ErrorMessage"]?.ToString()))
    {
    <div class="alerts alert-danger">
    @ViewData["ErrorMessage"]
    </div>
    }
    @if (!string.IsNullOrEmpty(ViewData["Message"]?.ToString()))
    {
    <div class="alerts alert-success">
    @ViewData["Message"]
    </div>
    } *@
    <EditForm FormName="basicInfo" Model="BasicInfo" method="POST" OnValidSubmit="HandleSubmit" novalidate>
        <DataAnnotationsValidator />
        <h2>Account Details</h2>
        <h5 class="theme">Basic info</h5>



        <div class="content">
            <div id="form-firstname">
                <label for="basicInfoFirstName">First name</label>

                @*                 @if (user.IsExternalAccount)
                {
                <input asp-for="BasicInfo!.FirstName" disabled />
                } *@
               @*  else
                { *@
                <InputText @bind-Value="BasicInfo.FirstName" placeholder="Enter your first name" id="basicInfoFirstName" />
                <ValidationMessage For="@(() => BasicInfo.FirstName)" />

                @* } *@
   @*              <label for="signupLastName">Lastname</label>
                <InputText @bind-Value="SignUpForm.LastName" class="form-input" placeholder="Enter your last name" id="signupLastName" />
                <ValidationMessage For="() => SignUpForm.LastName" /> *@

            </div>

            <div id="form-lastname">
                <label for="basicInfoLastName">Last name</label>
                @*                 @if (user.IsExternalAccount)
                {
                <input asp-for="BasicInfo!.LastName" disabled />
                } *@
          @*       else
                { *@
                <InputText @bind-Value="BasicInfo.LastName" placeholder="Enter your last name" id="basicInfoLastName" />
                <ValidationMessage For="(() => BasicInfo.LastName)" />
                @* } *@
            </div>

            <div id="form-email">
                <label for="basicInfoEmail">Email</label>
                @*                 @if (user.IsExternalAccount)
                {
                <input asp-for="BasicInfo!.Email" disabled />
                } *@
         @*        else
                { *@
                <InputText @bind-Value="BasicInfo.Email" placeholder="Enter your email" id="basicInfoEmail" />
                <ValidationMessage For="(() => BasicInfo.Email)" />
                @* } *@
            </div>

            <div id="form-phone">
                <label for="basicinfoPhone">Phone Number <p class="optional">(optional)</p></label>

                @*                 @if (user.IsExternalAccount)
                {
                <input asp-for="BasicInfo!.PhoneNumber" disabled />
                } *@
    @*             else
                { *@
                <InputText @bind-Value="BasicInfo.PhoneNumber" placeholder="Enter your phonenumber" id="basicinfoPhone" />
                <ValidationMessage For="(() => BasicInfo.PhoneNumber)" />

                @* } *@

            </div>

            <div id="form-bio">
                <label for="basicinfoBiography">Bio <p class="optional">(optional)</p></label>

                @*                 @if (user.IsExternalAccount)
                {
                <textarea asp-for="BasicInfo!.Biography" disabled></textarea>
                } *@
     @*            else
                { *@
                <textarea asp-for="BasicInfo.Biography" placeholder="Enter your biography" id="basicinfoBiography"></textarea>
                @* } *@
            </div>

            <div class="form-buttons">
                @*                 @if (user.IsExternalAccount)
                {
                <button class="btn-disabled" disabled>Cancel</button>
                <button class="btn-disabled" disabled>Save Changes</button>
                } *@
     @*            else
                { *@
                <button class="btn-gray" type="reset" onclick="location.reload();">Cancel</button>
                <button class="btn-theme"  type="submit">Save Changes</button>
                @* } *@
            </div>
        </div>
    </EditForm>
</section>
<hr />
<section class="address-info">
    <EditForm FormName="AddressInfo" Model="Address" OnValidSubmit="UpdateAddress" method="POST" novalidate class="address-form-info">
        <DataAnnotationsValidator />
        <h5 class="theme">Address info</h5>
        <div class="content">
            <div id="form-address-line_1">
                <label for="AddressInfoAddressLine_1">Addressline 1</label>
@*                 @if (Model.IsExternalAccount)
                { *@
                    @* <input asp-for="AddressInfo!.AddressLine_1" disabled /> *@
@*                 }
                else
                { *@
                <InputText @bind-Value="Address.AddressLine_1" placeholder="Enter your address" id="AddressInfoAddressLine_1" />
                <ValidationMessage For="(() => Address.AddressLine_1)" />
                @* } *@
            </div>

            <div id="form-address-line_2">
                <label for="AddressInfoAddressLine_2">Address line 2 <p class="optional">(optional)</p> </label>
@*                 @if (Model.IsExternalAccount)
                {
                    <input asp-for="AddressInfo!.AddressLine_2" disabled />
                } *@
@*                 else
                { *@
                <InputText @bind-Value="Address.AddressLine_2" placeholder="Enter your second address" id="AddressInfoAddressLine_2" />
                @* } *@
            </div>

            <div id="form-postal-code">
                <label for="AddressInfoPostalCode">Postal Code</label>
@*                 @if (Model.IsExternalAccount)
                {
                    <input asp-for="AddressInfo!.PostalCode" disabled />
                } *@
   @*              else
                { *@
                    <InputText @bind-Value="Address.PostalCode" placeholder="Enter your postalcode" id="AddressInfoPostalCode" />
                    <ValidationMessage For="(() => Address.PostalCode)" />
                @* } *@
            </div>

            <div id="form-city">
                <label for="AddressInfoCity">City</label>
@*                 @if (Model.IsExternalAccount)
                {
                    <input asp-for="AddressInfo!.City" disabled />
                } *@
                @* else
                { *@
                    <InputText @bind-Value="Address.City" placeholder="Enter City" id="AddressInfoCity" />
                    <ValidationMessage For="(() => Address.City)" />

                @* } *@
            </div>

            <div class="form-buttons">
@*                 @if (Model.IsExternalAccount)
                {
                    <button class="btn-disabled" disabled>Cancel</button>
                    <button class="btn-disabled" disabled>Save Changes</button>
                } *@
@*                 else
                { *@
                    <button class="btn-gray" type="reset" onclick="location.reload();">Cancel</button>
                    <button class="btn-theme" type="submit">Save Changes</button>
                @* } *@
            </div>
        </div>
    </EditForm>
</section>


@code {
    private BasicInfoModel BasicInfo { get; set; } = new();
    private AddressInfoModel AddressInfo { get; set; } = new();


    // [CascadingParameter]
    private ApplicationUser user { get; set; } = new();
    public AddressEntity Address { get; set; } = new();
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // user = await UserManager.GetUserAsync(HttpContext.User) ?? null!;
        // username = await UserManager.GetUserNameAsync(user);
        // phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        // Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        // if (Input.PhoneNumber != phoneNumber)
        // {
        //     var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
        //     if (!setPhoneResult.Succeeded)
        //     {
        //     }
        // }

        await SignInManager.RefreshSignInAsync(user);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }

    public void HandleSubmit()
    {

    }

    public void UpdateAddress()
    {
        
    }
}
