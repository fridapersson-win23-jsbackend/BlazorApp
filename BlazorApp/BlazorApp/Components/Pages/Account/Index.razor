@page "/Account/Manage"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using BlazorApp.Models.Account
@using BlazorApp.Services
@using Microsoft.AspNetCore.Identity
@using BlazorApp.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@* @inject IDbContextFactory<ApplicationDbContext> DbContextFactory *@
    @inject IServiceScopeFactory ScopeFactory
    @inject UserService UserService

@attribute [StreamRendering]


<PageTitle>Profile</PageTitle>

@* <h3>Profile</h3> *@

@* <div class="row">
    <div class="col-md-6"> *@
@*         <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm> *@

        
@*     </div>
</div> *@


<EditForm FormName="basicInfo" Model="accountDetails" method="POST" OnValidSubmit="UpdateAccountDetailsInfo" novalidate>
 <DataAnnotationsValidator />

    <section class="basic-info">
            <h2>Account Details</h2>
            <h5 class="theme">Basic info</h5>

            <div class="content">
                <div id="form-firstname">
                    <label for="basicInfoFirstName">First name</label>

                    <InputText @bind-Value="accountDetails.FirstName" placeholder="Enter your first name" id="basicInfoFirstName" />
                    <ValidationMessage For="@(() => accountDetails.FirstName)" />
                </div>

                <div id="form-lastname">
                    <label for="basicInfoLastName">Last name</label>

                    <InputText @bind-Value="accountDetails.LastName" placeholder="Enter your last name" id="basicInfoLastName" />
                    <ValidationMessage For="(() => accountDetails.LastName)" />
                </div>

                <div id="form-email">
                    <label for="basicInfoEmail">Email</label>

                    <InputText @bind-Value="accountDetails.Email" placeholder="Enter your email" id="basicInfoEmail" />
                    <ValidationMessage For="(() => accountDetails.Email)" />
                </div>

                <div id="form-phone">
                    <label for="basicinfoPhone">Phone Number <p class="optional">(optional)</p></label>

                    <InputText @bind-Value="accountDetails.PhoneNumber" placeholder="Enter your phonenumber" id="basicinfoPhone" />
                    <ValidationMessage For="(() => accountDetails.PhoneNumber)" />
                </div>

                <div id="form-bio">
                    <label for="basicinfoBiography">Bio <p class="optional">(optional)</p></label>

                    <InputTextArea @bind-Value="accountDetails.Biography" placeholder="Enter your biography" id="basicinfoBiography"></InputTextArea>
                </div>

@*                 <div class="form-buttons">

                    <button class="btn-gray" type="reset" onclick="location.reload();">Cancel</button>
                    <button class="btn-theme" type="submit">Save Changes</button>

                </div> *@
            </div>
    </section>

    <hr />
    <section class="address-info">
        <h5 class="theme">Address info</h5>
        <div class="content">
            <div id="form-address-line_1">
                <label for="AddressInfoAddressLine_1">Addressline 1</label>

                <InputText @bind-Value="accountDetails.AddressLine_1" placeholder="Enter your address" id="AddressInfoAddressLine_1" />
                <ValidationMessage For="(() => accountDetails.AddressLine_1)" />

            </div>

            <div id="form-address-line_2">
                <label for="AddressInfoAddressLine_2">Address line 2 <p class="optional">(optional)</p> </label>

                <InputText @bind-Value="accountDetails.AddressLine_2" placeholder="Enter your second address" id="AddressInfoAddressLine_2" />

            </div>

            <div id="form-postal-code">
                <label for="AddressInfoPostalCode">Postal Code</label>

                <InputText @bind-Value="accountDetails.PostalCode" placeholder="Enter your postalcode" id="AddressInfoPostalCode" />
                <ValidationMessage For="(() => accountDetails.PostalCode)" />

            </div>

            <div id="form-city">
                <label for="AddressInfoCity">City</label>

                <InputText @bind-Value="accountDetails.City" placeholder="Enter City" id="AddressInfoCity" />
                <ValidationMessage For="(() => accountDetails.City)" />

            </div>

            <div class="form-buttons">

                <button class="btn-gray" type="reset" onclick="location.reload();">Cancel</button>
                <button class="btn-theme" type="submit">Save Changes</button>

            </div>
        </div>
    </section>

</EditForm>
@if(!string.IsNullOrEmpty(StatusMessage))
{
    <div class="alerts alert-success">
        @StatusMessage
    </div>
}


@code {
    private string? StatusMessage { get; set; }
    private AccountDetailsModel accountDetails { get; set; } = new();

    private ApplicationUser user { get; set; } = new();



    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetUserAsync();

        if(user != null)
        {
            accountDetails.FirstName = user.FirstName;
            accountDetails.LastName = user.LastName;
            accountDetails.Email = user.Email!;
            accountDetails.PhoneNumber = user.PhoneNumber;
            accountDetails.Biography = user.Biography;
            accountDetails.AddressLine_1 = user.Address!.AddressLine_1;
            accountDetails.AddressLine_2 = user.Address.AddressLine_2;
            accountDetails.PostalCode = user.Address.PostalCode;
            accountDetails.City = user.Address.City;
        }

    }

    private async Task OnValidSubmitAsync()
    {


        await SignInManager.RefreshSignInAsync(user);
    }


    public async Task UpdateAccountDetailsInfo()
    {
        var success = await UserService.UpdateUserAsync(accountDetails);
        if(success)
        {
            StatusMessage = "User has been updated successfully";
        }
        else
        {
            StatusMessage = "Something went wrong!";
        }
    }


    public void UploadProfileImg() {}
}
