@page "/courses"
@using BlazorApp.Models.Courses
@using BlazorApp.Models.GraphQL
@using Microsoft.AspNetCore.Authorization

@attribute [StreamRendering]
@attribute [Authorize]


<PageTitle>Courses</PageTitle>

<section id="courses" class="courses">
    <div class="container">

        <div class="bread-crum">
            <div class="home">
                <a href="/" asp-action="Index" asp-controller="Home">
                    <i class="fa-light fa-house"></i>
                    <p>Home</p>
                </a>
            </div>
            <div class="arrow">
                <i class="fa-light fa-chevrons-right"></i>
            </div>
            <a href="/courses" asp-action="Courses" asp-controller="Courses">
                <p>Courses</p>
            </a>
        </div>
        <div class="heading">
            <h1>Courses</h1>

            <div class="tool-and-search-container">
                <form>
                    <div class="select">
                        <div class="selected">All categories <i class="fa-solid fa-chevron-down"></i></div>
                        <div class="select-options">
                            <div class="option" data-value="all">All categories</div>
                            @*                             @if (courses!.Category != null)
                            {
                            foreach (var category in courses.Category.CategoryName!)
                            {
                            <div class="option" data-value="@category">@category</div>
                            }
                            } *@
                        </div>
                    </div>
                    <div class="input-search">
                        <input class="searchQuery" id="searchQuery" placeholder="Search Courses" type="text">
                        <i class="fa-regular fa-magnifying-glass"></i>
                    </div>
                </form>
            </div>
        </div>

        @* @await Html.PartialAsync("~/Views/Courses/Sections/_CoursesPartial.cshtml") *@

        @if (courses != null)
        {
            <div class="box-content">
                <div class="boxes" id="boxes">
                    @foreach (var course in courses)
                    {
                        <div class="box">
                            @if (course.IsBestSeller)
                            {
                                <span class="best-seller text-s">Best Seller</span>
                            }
@*                             <form asp-controller="Account" asp-action="@(course.IsSaved ? "RemoveCourseFromProfile" : "SaveCourseToProfile")">
                                <input type="hidden" name="courseId" value="@course.Id" />
                                <button type="submit" class="bookmark x-mark @(course.IsSaved ? "fa-solid fa-bookmark" : "fa-regular fa-bookmark")" data-courseid="@course.Id" data-saved="@course.IsSaved"></button>
                            </form> *@

                            <div class="content">
                                <a href="/courses/@course.Id" asp-route-id="@course.Id">
                                    <img src="@course.ImageUri" />
                                    <p class="h5">@course.Title</p>

                                    <p class="text-s">By @course.Author</p>
                                    <div class="extra-price">
                                        @if (course.DiscountedPrice == 0)
                                        {
                                            <p class="price">$@course.Price</p>
                                        }
                                        else
                                        {
                                            <p class="new-price">$@course.DiscountedPrice</p>
                                            <span class="old-price">$@course.Price</span>
                                        }
                                    </div>

                                    <div class="line"></div>

                                    <div class="bottom-info">
                                        <div class="hours">
                                            <i class="fa-light fa-clock"></i>
                                            <p>@course.HoursToComplete hours</p>
                                        </div>
                                        <div class="likes">
                                            <i class="fa-light fa-thumbs-up"></i>
                                            <p>
                                                @($"{course.LikesInPercent}%")
                                                (@($"{course.LikesInNumber}K"))

                                            </p>
                                        </div>
                                    </div>
                                </a>
                            </div>
                        </div>
                        @* @await Html.PartialAsync("~/Views/Courses/Components/_CourseCardPartial.cshtml", course) *@
                        @* <CourseCard /> *@
                    }
                </div>
                @* @await Html.PartialAsync("~/Views/Courses/Components/_PaginationPartial.cshtml") *@
            </div>
            @* @await Html.PartialAsync("~/Views/Courses/Sections/_DisplayCoursesPartial.cshtml") *@
        }
        else
        {
            <p><em>Loading...</em></p>
        }

        <div class="banner">
            <img src="./images/courses/banner.svg" />
            <div class="skills">
                <p class="text-m">Ready to get started?</p>
                <p class="h4">Take Your <span>Skills</span> to the Next Level</p>
                <button class="btn-theme">Work with us</button>
            </div>
        </div>
    </div>
</section>

@code {
    private List<CourseCardModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var query = new GraphQLQuery { Query = "{getCourses { id isBestSeller title imageUri authors {authorName} prices {price discountedPrice } hoursToComplete likesInNumber likesInPercent }}" };
            var response = await Http.PostAsJsonAsync("https://courseprovider-fp-silicon.azurewebsites.net/api/graphql?code=YsfIYn4-vNUORavCIYDMl9D-Tw_DBOoebyijYgS_DTdZAzFu-Oos3w==", query);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
                courses = result?.Data.GetProperty("getCourses").EnumerateArray()
                .Where(course => !string.IsNullOrEmpty(course.GetProperty("id").GetString()))
                    .Select(course => new CourseCardModel
                    {
                        Id = course.GetProperty("id").GetString(),
                        IsBestSeller = course.GetProperty("isBestSeller").GetBoolean(),
                        ImageUri = course.GetProperty("imageUri").GetString(),
                        Title = course.GetProperty("title").GetString(),
                        Author = course.GetProperty("authors")[0].GetProperty("authorName").GetString(),
                        Price = course.GetProperty("prices").GetProperty("price").GetDecimal(),
                        DiscountedPrice = course.GetProperty("prices").GetProperty("discountedPrice").GetDecimal(),
                        HoursToComplete = course.GetProperty("hoursToComplete").GetDecimal(),
                        LikesInNumber = course.GetProperty("likesInNumber").GetDecimal(),
                        LikesInPercent = course.GetProperty("likesInPercent").GetDecimal()
                    }).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
